using System;

namespace 다형성
{
    class Player
    {
        protected int hp;
        protected int attack;

        public virtual void Move()//어떤 기능을 누구나 활용할수 있지만 타입에 따라 조금씩 달라지는 경우(공용이 아닌경우) virtual, override를 사용
        {
            Console.WriteLine("Player 이동!");
        }
    }
    class Knight : Player
    {
        public override void Move()
        {
            base.Move();//부모의 함수 호출 가능

            Console.WriteLine("Knight 이동!");
        }
    }

    class SuperKnight : Knight
    {
        public override void Move()
        {
            Console.WriteLine("superknight 이동!");
        }
    }


    class Mage : Player
    {
        public int mp;
        public override void Move()
        {
            Console.WriteLine("Mage 이동!");
        }

    }

    //오버로딩 VS 오버라이딩 ->오버로딩=함수 이름의 재사용 // 오버라이딩 = 어떤 함수에다가, 실제 타입에 따라 다양한 형태로 동작을 하겠다는 뜻

    class Program
    {
        static void EnterGame(Player player)
        {
            player.Move();
            bool isMage = (player is Mage);
            if (isMage)
            {
                Mage mage = (Mage)player;
                mage.mp = 10;
            }

         
        }
        static void Main(string[] args)
        {
            Knight knight = new Knight();
            Mage mage = new Mage();

            Player magePlayer = mage;
            Mage mage2 = (Mage)magePlayer;

            knight.Move();
            mage.Move();

            //EnterGame(knight);
            EnterGame(mage);
        }
    }
}
